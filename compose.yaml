services:
  api-server:
    container_name: api-server
    build:
      context: ./api-server
      dockerfile: Dockerfile
    ports:
      - "8000:8000" # APIサーバーをホストするポート
    volumes:
      - ./api-server:/app
    environment:
      - PYTHONUNBUFFERED=1

  web-console:
    container_name: web-console
    build:
      context: ./web-console
      dockerfile: Dockerfile
    ports:
      - "5173:5173" # フロントエンドをホストするポート
    volumes:
      - ./web-console:/app
    environment:
      - CHOKIDAR_USEPOLLING=true # ホットリロード用

  # grafana:
  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_COOKIE_SAMESITE=none
      - GF_SECURITY_COOKIE_SECURE=true
    #depends_on:
    #- influxdb logdbが出来次第追記

  log-db:
    image: influxdb:2.7.11
    container_name: "log-db"
    ports:
      - 8086:8086
    # volumes:
    #   - ./log-db/data:/var/lib/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=adminadmin
      - DOCKER_INFLUXDB_INIT_ORG=satellite-cloud
      - DOCKER_INFLUXDB_INIT_BUCKET=simulation
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=admin-token
    volumes:
      - ./log-db/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - control

  controller:
    container_name: controller
    build:
      context: ./campaign
      dockerfile: controller/Dockerfile
    tty: true
    ports:
      - "8920:80" 
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - app:/campaign/app/
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
    networks:
      - default
      - control

volumes:
  grafana-storage:
  app:
    name: prototype-app


networks:
  control:
    external: true
  
